	>> require 'doctest_helper'

## Slipcover ##

- treat a series of objects as a cluster by:
 - systematically calling the same method on all of them in parallel
 - zipping up the results

# Example: access a cluster of CouchDB databases accessed via CouchRest (http://github.com/jchris/couchrest/tree/master)

Require CouchRest and Slipcover:

	>> require 'slipcover'
	>> require 'couchrest'

Create the members of the cluster (these could be on different hosts, but we'll just simulate that here):
  	 
	>> cr1 = CouchRest.new('localhost:5984')
	>> cr1.database('slipcover-test').delete!
	>> begin; cr1.create_db('slipcover-test'); rescue; nil; end;

Create cluster member two.
	
	>> cr2 = CouchRest.new('127.0.0.1:5984')
	>> cr2.database('slipcover-test2').delete!
	>> begin; cr2.create_db('slipcover-test2'); rescue; nil; end;
	>> db1 = cr1.database('slipcover-test')
	>> db2 = cr2.database('slipcover-test2')
	>> saved = db1.save({"test"=>"doc"})
	>> saved['ok']
	=> true

Assign them to Slipcover for management:
        
	>> cluster = Slipcover.new( [db1, db2] ) 

By default, our cluster will re-raise any errors that occur in individual members
	
	>> lambda{ cluster.get( saved['id'] )}.raises_error? RestClient::Request::RequestFailed
	=> true

but, if we want to ignore certain errors in the members (like in this case where we only want to hear back from the member of the cluster that actually has the document we're looking for), we can tell Slipcover to silence errors of a certain type

	>> cluster.silenced_errors << RestClient::Request::RequestFailed	
	=> [RestClient::Request::RequestFailed]

and then getting a document that's present on only one of the members will return the document without any noise from the other cluster members:
  
	>> result = cluster.get( saved['id'] )
	>> result.first['test']
	=> "doc" 

If members raise other errors that aren't included in the list to be silenced, however, they will bring things to a halt. For example, if we add another member to the cluster on a broken connection

	>> db3 = CouchRest.new('broken-socket').database('no-couch-here')
	>> cluster.add_member db3

then the resulting errors will still raise:

	>> lambda{ cluster.get( saved['id'] )}.raises_error? SocketError
	=> true

Let's remove this broken cluster member so we can continue our tests:

	>> cluster.remove_member{ |m| m.host == 'broken-socket' }
	>> cluster.members.length == 2
	=> true

We could also remove a particular member if we had it handy

	>> cluster.add_member db3
	>> cluster.remove_member db3
	>> cluster.members.length == 2
	=> true


# Example: 